using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Printing;

namespace FlyCn.FlyCnDAL
{
    public class ExcelReportSettings
    {
        #region Properties
        public string reportHeader
        {
            get;
            set;
        }
        public string reportLogo
        {
            get;
            set;
        }
        public string reportGeneratedBy
        {
            get;
            set;
        }
        public bool isGeneratedDateRequired
        {
            get;
            set;
        }
        public string orientation
        {
            get;
            set;
        }
        public string printSize
        {
            get;
            set;
        }
        public bool isClientLogoRequired
        {
            get;
            set;
        }
        #endregion Properties

        #region GenerateReport
        public void GenerateReport(Microsoft.Office.Interop.Excel.Worksheet ws)
        {
            Microsoft.Office.Interop.Excel.Range chartRange = ws.get_Range("A1", "z2");
            UIClasses.Const Const = new UIClasses.Const();
            FlyCnDAL.Security.UserAuthendication UA;

            HttpContext context = HttpContext.Current;
            UA = (FlyCnDAL.Security.UserAuthendication)context.Session[Const.LoginSession];
            reportGeneratedBy = UA.userName;

            //--------------------------Cell font color , size--------------------------//
            Microsoft.Office.Interop.Excel.Range formatRange;
            formatRange = ws.get_Range("A1", "z2");
            formatRange.Font.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Black);
            formatRange.Font.Size = 25;

            //-------------------Cell background color----------------//
            Microsoft.Office.Interop.Excel.Range formatRange1;
            formatRange1 = ws.get_Range("A1", "z2");
            formatRange1.Interior.Color = System.Drawing.
            ColorTranslator.ToOle(System.Drawing.Color.Bisque);

            //----------------------Adding Custom header to the excel file--------------//
            ws.get_Range("e2", "g2").Merge(false);
            chartRange = ws.get_Range("e2", "g2");
            chartRange.FormulaR1C1 = "Flycn";
            chartRange.HorizontalAlignment = 3;
            chartRange.VerticalAlignment = 3;

            //----------------------Generated By--------------//
            ws.get_Range("k1", "n1").Merge(false);
            chartRange = ws.get_Range("k1", "n1");
            chartRange.FormulaR1C1 = "Generated By : " + reportGeneratedBy;
            ws.get_Range("k1", "n1").Cells.Font.Size = 12;
            chartRange.HorizontalAlignment = 3;
            chartRange.VerticalAlignment = 3;

            //---------------insert logo---------------------------//
            object misValue = System.Reflection.Missing.Value;

            ws.Shapes.AddPicture("E:\\Applications\\FlyCn1.1_New\\FlyCn\\Images\\flycnLogo.png", Microsoft.Office.Core.MsoTriState.msoFalse, Microsoft.Office.Core.MsoTriState.msoCTrue, 300, 20, 45, 45);

            //set print paper size as A4    
            ws.PageSetup.PaperSize = Microsoft.Office.Interop.Excel.XlPaperSize.xlPaperA4;

            if (isGeneratedDateRequired == true)
            {

                ws.get_Range("k2", "n2").Merge(false);
                chartRange = ws.get_Range("k2", "n2");
                chartRange.FormulaR1C1 = "Generated Date : " + DateTime.Now.ToString("dd-MM-yyyy");
                 ws.get_Range("k2", "n2").Cells.Font.Size = 12;
                chartRange.HorizontalAlignment = 3;
                chartRange.VerticalAlignment = 3;
            }

            if (orientation == "Portrait")
            {
                ws.PageSetup.Orientation = Microsoft.Office.Interop.Excel.XlPageOrientation.xlPortrait;
            }
            else
            {
                ws.PageSetup.Orientation = Microsoft.Office.Interop.Excel.XlPageOrientation.xlLandscape;
            }

            if (isClientLogoRequired == true)
            {

            }
        }
        #endregion GenerateReport 
    }
}